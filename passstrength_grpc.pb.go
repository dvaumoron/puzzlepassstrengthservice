// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: passstrength.proto

package puzzlepassstrengthservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassstrengthClient is the client API for Passstrength service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassstrengthClient interface {
	GetRules(ctx context.Context, in *LangRequest, opts ...grpc.CallOption) (*PasswordRules, error)
	Check(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Response, error)
}

type passstrengthClient struct {
	cc grpc.ClientConnInterface
}

func NewPassstrengthClient(cc grpc.ClientConnInterface) PassstrengthClient {
	return &passstrengthClient{cc}
}

func (c *passstrengthClient) GetRules(ctx context.Context, in *LangRequest, opts ...grpc.CallOption) (*PasswordRules, error) {
	out := new(PasswordRules)
	err := c.cc.Invoke(ctx, "/puzzlepassstrengthservice.Passstrength/GetRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passstrengthClient) Check(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puzzlepassstrengthservice.Passstrength/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassstrengthServer is the server API for Passstrength service.
// All implementations must embed UnimplementedPassstrengthServer
// for forward compatibility
type PassstrengthServer interface {
	GetRules(context.Context, *LangRequest) (*PasswordRules, error)
	Check(context.Context, *PasswordRequest) (*Response, error)
	mustEmbedUnimplementedPassstrengthServer()
}

// UnimplementedPassstrengthServer must be embedded to have forward compatible implementations.
type UnimplementedPassstrengthServer struct {
}

func (UnimplementedPassstrengthServer) GetRules(context.Context, *LangRequest) (*PasswordRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedPassstrengthServer) Check(context.Context, *PasswordRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPassstrengthServer) mustEmbedUnimplementedPassstrengthServer() {}

// UnsafePassstrengthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassstrengthServer will
// result in compilation errors.
type UnsafePassstrengthServer interface {
	mustEmbedUnimplementedPassstrengthServer()
}

func RegisterPassstrengthServer(s grpc.ServiceRegistrar, srv PassstrengthServer) {
	s.RegisterService(&Passstrength_ServiceDesc, srv)
}

func _Passstrength_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassstrengthServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlepassstrengthservice.Passstrength/GetRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassstrengthServer).GetRules(ctx, req.(*LangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passstrength_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassstrengthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlepassstrengthservice.Passstrength/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassstrengthServer).Check(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Passstrength_ServiceDesc is the grpc.ServiceDesc for Passstrength service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passstrength_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puzzlepassstrengthservice.Passstrength",
	HandlerType: (*PassstrengthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRules",
			Handler:    _Passstrength_GetRules_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Passstrength_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passstrength.proto",
}
